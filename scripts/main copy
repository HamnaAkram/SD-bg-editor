import os
import re
import sys
import traceback
from collections import namedtuple

import gradio as gr

from modules import shared, paths, script_callbacks, extensions, script_loading, scripts_postprocessing
# from sambackend.samscripts import sam_predict

AlwaysVisible = object()


class PostprocessImageArgs:
    def __init__(self, image):
        self.image = image


sam_model_name = 'sam_vit_h_4b8939.pth'
dino_checkbox = False
dino_model_name = 'GroundingDINO_SwinT_OGC (694MB)'
dino_text_prompt = ''
dino_box_threshold = 0.3
dino_preview_checkbox = False
dino_preview_boxes_selection = []


class Script:
    name = None
    """script's internal name derived from title"""

    filename = None
    args_from = None
    args_to = None
    alwayson = False

    is_txt2img = False
    is_img2img = False

    group = None
    """A gr.Group component that has all script's UI inside it"""

    infotext_fields = None
    """if set in ui(), this is a list of pairs of gradio component + text; the text will be used when
    parsing infotext to set the value for the component; see ui.py's txt2img_paste_fields for an example
    """

    paste_field_names = None
    """if set in ui(), this is a list of names of infotext fields; the fields will be sent through the
    various "Send to <X>" buttons when clicked
    """

    api_info = None
    """Generated value of type modules.api.models.ScriptInfo with information about the script for API"""

    def title(self):
        """this function should return the title of the script. This is what will be displayed in the dropdown menu."""
        return 'BG Editor'

    def ui(self, is_img2img):
        """this function should create gradio UI elements. See https://gradio.app/docs/#components
        The return value should be an array of all components that are used in processing.
        Values of those returned components will be passed to run() and process() functions.
        """
        return ()

    def show(self, is_img2img):
        """
        is_img2img is True if this function is called for the img2img interface, and Fasle otherwise

        This function should return:
         - False if the script should not be shown in UI at all
         - True if the script should be shown in UI if it's selected in the scripts dropdown
         - script.AlwaysVisible if the script should be shown in UI at all times
         """

        return True

    def run(self, p, *args):
        """
        This function is called if the script has been selected in the script dropdown.
        It must do all processing and return the Processed object with results, same as
        one returned by processing.process_images.

        Usually the processing is done by calling the processing.process_images function.

        args contains all values returned by components from ui()
        """

        pass

    def process(self, p, *args):
        """
        This function is called before processing begins for AlwaysVisible scripts.
        You can modify the processing object (p) here, inject hooks, etc.
        args contains all values returned by components from ui()
        """

        pass

    def before_process_batch(self, p, *args, **kwargs):
        """
        Called before extra networks are parsed from the prompt, so you can add
        new extra network keywords to the prompt with this callback.

        **kwargs will have those items:
          - batch_number - index of current batch, from 0 to number of batches-1
          - prompts - list of prompts for current batch; you can change contents of this list but changing the number of entries will likely break things
          - seeds - list of seeds for current batch
          - subseeds - list of subseeds for current batch
        """

        pass

    def process_batch(self, p, *args, **kwargs):
        """
        Same as process(), but called for every batch.

        **kwargs will have those items:
          - batch_number - index of current batch, from 0 to number of batches-1
          - prompts - list of prompts for current batch; you can change contents of this list but changing the number of entries will likely break things
          - seeds - list of seeds for current batch
          - subseeds - list of subseeds for current batch
        """

        pass

    def postprocess_batch(self, p, *args, **kwargs):
        """
        Same as process_batch(), but called for every batch after it has been generated.

        **kwargs will have same items as process_batch, and also:
          - batch_number - index of current batch, from 0 to number of batches-1
          - images - torch tensor with all generated images, with values ranging from 0 to 1;
        """

        pass

    def postprocess_image(self, p, pp: PostprocessImageArgs, *args):
        """
        Called for every image after it has been generated.
        """

        pass

    def postprocess(self, p, processed, *args):
        """
        This function is called after processing ends for AlwaysVisible scripts.
        args contains all values returned by components from ui()
        """

        pass

    def before_component(self, component, **kwargs):
        """
        Called before a component is created.
        Use elem_id/label fields of kwargs to figure out which component it is.
        This can be useful to inject your own components somewhere in the middle of vanilla UI.
        You can return created components in the ui() function to add them to the list of arguments for your processing functions
        """

        pass

    def after_component(self, component, **kwargs):
        """
        Called after a component is created. Same as above.
        """

        pass

    def describe(self):
        """unused"""
        return ""

    def elem_id(self, item_id):
        """helper function to generate id for a HTML element, constructs final id out of script name, tab and user-supplied item_id"""

        need_tabname = self.show(True) == self.show(False)
        tabkind = 'img2img' if self.is_img2img else 'txt2txt'
        tabname = f"{tabkind}_" if need_tabname else ""
        title = re.sub(r'[^a-z_0-9]', '', re.sub(r'\s', '_', self.title().lower()))

        return f'script_{tabname}{title}_{item_id}'

def on_ui_tabs():
    tab_prefix = 'my_tab'
    with gr.Blocks(analytics_enabled=False) as my_tab:
        with gr.Row():
            with gr.Column():
                gr.HTML(value="<p>Left click the image to add one positive point (black dot). Right click the image to add one negative point (red dot). Left click the point to remove it.</p>")
                sam_input_image = gr.Image(label="Image for Segment Anything", elem_id=f"{tab_prefix}input_image", source="upload", type="pil", image_mode="RGBA")
                sam_remove_dots = gr.Button(value="Remove all point prompts")
                sam_dummy_component = gr.Label(visible=False)
                sam_remove_dots.click(
                        fn=lambda _: None,
                        _js="samRemoveDots",
                        inputs=[sam_dummy_component],
                        outputs=None)
                # with gr.Row():
                    # sam_genmask =  gr.Button(value="Preview Segmentation", elem_id=f"{tab_prefix}run_button")
                    # sam_result = gr.Text(value="", label="Segment Anything status")
                    # sam_output_mask_gallery = gr.Gallery(label='Segment Anything Output').style(grid=3)

                    # CODEINFO SAM SEGMENTATION
                    # sam_genmask.click(
                    #     fn=sam_predict,
                    #     _js='submit_sam',
                    #     inputs=[sam_model_name, sam_input_image,        # SAM
                    #             sam_dummy_component, sam_dummy_component,   # Point prompts
                    #             dino_checkbox, dino_model_name, dino_text_prompt, dino_box_threshold,  # DINO prompts
                    #             dino_preview_checkbox, dino_preview_boxes_selection],  # DINO preview prompts
                    #     outputs=[sam_output_mask_gallery, sam_result])
                    
    return [(my_tab, 'BG Editor', 'my_tab')]

script_callbacks.on_ui_tabs(on_ui_tabs)
